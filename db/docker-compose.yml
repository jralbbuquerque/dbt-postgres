version: '3'

services:
  postgres:                                           # Nome do serviço
    image: postgres:latest                            # Imagem oficial do postgres
    container_name: postgres-dbt                      # Nome do container
    restart: always                                   # Define que o container seja automaticamente reiniciado em caso de falha
    environment:                                      # Definição do enviroment
      POSTGRES_USER: ${POSTGRES_USER}                 # Usuário do banco
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}         # Senha do banco
      POSTGRES_DB: ${POSTGRES_DB}                     # Nome do banco de dados criado
    ports:                                            # Define as portas
      - "5432:5432"                                   # Porta 5432 do container será acessa pela portal 5432 do host local
    healthcheck:
            test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
            timeout: 20s
            retries: 10
    volumes:                                          # Define volumes
     - ./database/postgres:/var/lib/postgresql/data   # Cria bind mount
    networks:                                         # Define network utilizada
      - postgres-network                              # Nome da network

  pgadmin:
    container_name: pgadmin-dbt
    image: dpage/pgadmin4
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./database/pgadmin:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    networks:
      - postgres-network

  build-db-dbt:
    build: .
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres-dbt
      - POSTGRES_PORT=5432
      - POSTGRES_SRC_SCHEMA=${POSTGRES_SRC_SCHEMA}
    volumes:
      - .:/app
    working_dir: /app
    networks:
      - postgres-network
    depends_on:
      postgres:
        condition: service_healthy

networks:
  postgres-network:
    driver: bridge